

#include <avr/pgmspace.h>
#include <Bounce2.h>
#include <EEPROM.h>   // –ø–æ–¥–∫–ª—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ä–∞–±–æ—Ç—ã —Å –µ–ø—Ä–æ–º
#include "U8g2lib.h"  // –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ä–∞–±–æ—Ç—ã —Å –¥–∏—Å–ø–ª–µ–µ–º
#include <PWM.h>    // –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –®–ò–ú


// –ù–æ–º–µ—Ä–∞ –ø–∏–Ω–æ–≤ ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏
#define BTN_OK    A0  //  sw1
#define BTN_UP    12  //E1
#define BTN_DOWN  A1  //E2
#define BUZZER_PIN A2 // –ø–∏—â–∞–ª–∫–∞
#define PIN_PWR_HOLD 6  // –ü–∏–Ω –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
#define LONG_PRESS_MS  1000

// –î—Ä—É–≥–∏–µ –ø–∏–Ω—ã
#define ANALOG_IN      A7  // –≤–æ–ª—å—Ç–º–µ—Ç—Ä/–æ—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ
#define FREQ_IN        2   // —á–∞—Å—Ç–æ—Ç–æ–º–µ—Ä
#define GEN_NEG       10
#define GEN_POS        9
#define FLASH_PIN 8  // –ü–∏–Ω —Ñ–æ–Ω–∞—Ä–∏–∫–∞
#define POLARITY_PIN 3          // D3 ‚Äî –≤—Ö–æ–¥ –æ—Ç –æ–ø—Ç–æ–ø–∞—Ä—ã (–ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∞)
#define PIN_MOSFET_CTRL    7   // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MOSFET –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∏–Ω—É—Å–æ–≤–æ–≥–æ —â—É–ø–∞
#define PULL_PIN 4              // –ø–∏–Ω –ø–æ–¥—Ç—è–∂–∫–∏ –∫ VCC
static bool pullOn = false;     // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç—è–∂–∫–∏ (ON/OFF)



#define VOLT_SCALE 0.0332f  // –ü—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–æ: 1.1 * 31.3 / 1024
#define DIODE_SCALE ((ADC_REF / 1024.0f / DIVIDER_K) * 1.7f)
// #define DIODE_SCALE (5.681f / 1000.0f)  // –µ—Å–ª–∏ ADC_REF = 1.1, –¥–µ–ª–∏—Ç–µ–ª—å 300–∫/10–∫

void voltmetr();
void oscilograf();
void shastotomer();
void generator();
void can_lin_test();
void timers();
void dpkv();
void processButtons(); // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
void resetInactivityTimer();   //–§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ lastActivityTime –ø—Ä–∏ –ª—é–±–æ–º –Ω–∞–∂–∞—Ç–∏–∏
void diode_test();     // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∑–≤–æ–Ω–∫–∏ —Ü–µ–ø–∏ –∏ –¥–∏–æ–¥–æ–≤
void checkReversePolarity(); // –§—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏
volatile bool reverseDetected = false;
const unsigned long recoveryDelay = 2000;  // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –∏ –Ω–æ–ø–æ—Ä–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
const float ADC_REF = 1.1;  // –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ê–¶–ü
const float DIVIDER_K = 10.0 / 310.0;  // –î–µ–ª–∏—Ç–µ–ª—å 300–∫ / 10–∫ 

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Ç—è–∂–∫–∏ + –≤ —Ä–µ–∂–∏–º–µ –¥–∏–æ–¥—ã –∏ —Ä–µ–∂–∏–º–µ –æ—Å—Ü–∏–ª–æ–≥—Ä–∞—Ñ
static bool pullUser   = false;  // —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ç—É–º–±–ª–µ—Ä –∫–Ω–æ–ø–∫–æ–π)
static bool pullForced = false;  // —Ä–µ–∂–∏–º "–¥–∏–æ–¥—ã" –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ç—è–∂–∫—É
extern volatile bool overVoltageDetected;

// // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–ª—è –æ—Å—Ü–∏–ª–æ–≥—Ä–∞—Ñ–∞
// byte voltScaleMode = 0;  // 0: 5V, 1:15V, 2:25V, 3:35V, 4:AUTO
// bool oscAutoScale = false;
//float volt_in = 0.0;  // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–æ–ª—å—Ç–º–µ—Ç—Ä–æ–º
static float volt_in = 0.0f;
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
unsigned long lastActivityTime = 0;      // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
bool buzzerWarned = false;               // –§–ª–∞–≥, —á—Ç–æ –º—ã —É–∂–µ –ø–∏–∫–Ω—É–ª–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
unsigned long StopTime = 0;

struct ButtonHandler {
  Bounce btn;
  void (*onShort)();    // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
  void (*onLong)();     // –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
  unsigned long pressedAt = 0;
  bool longHandled = false;

  // –≤–æ—Ç —ç—Ç–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω—É–∂–µ–Ω ‚Üì‚Üì‚Üì
  ButtonHandler(Bounce b, void (*s)(), void (*l)()) {
    btn = b;
    onShort = s;
    onLong = l;
  }

  // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ–∂–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
  ButtonHandler() {}
};



// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã –∫–æ–ª–±—ç–∫–æ–≤ (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
void okShort();   void okLong();
void upShort();   void upLong();
void downShort(); void downLong();


// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫
ButtonHandler buttons[] = {
  { Bounce(), okShort,   okLong   }, //sw1
  { Bounce(), upShort,   upLong   }, //E1
  { Bounce(), downShort, downLong }  //E2
  
};

bool flashlightOn = false; // –¥–ª—è –≤–∫–ª –∏ –≤—ã–∫ —Ñ–æ–Ω–∞—Ä–∏–∫–∞
  // –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ö–Ω–æ–ø–∫–∏ 
volatile bool flagBtnOk = false;    //sw1
// volatile bool flagLongOk = false;   //sw1
volatile bool flagBtnUp = false;    //E1
volatile bool flagLongUp = false;   //E1
volatile bool flagBtnDown = false;  //E2





// –ó–∞–≥–ª—É—à–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
void okShort()   { flagBtnOk = true;  } //  sw1
// –í—ã–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –¥–æ–ª–≥–æ–º —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏  sw1
void okLong() { 
 
  if (millis() - StopTime < 5000)return;  // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥—ã
  tone(BUZZER_PIN, 300, 100);         // –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
  delay(150);                         // –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  digitalWrite(PIN_PWR_HOLD, LOW);   // —Å–±—Ä–æ—Å –ø–∏—Ç–∞–Ω–∏—è
  delay(100);
  while (1);                          // –∂–¥—ë–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
}
void upShort()   { flagBtnUp = true;  } //E1

void upLong() {flagLongUp = true; } //E1 ‚Üê –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ voltmetr()


void downShort() { flagBtnDown = true; } //E2
// –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ–Ω–∞—Ä–∏–∫–∞
void downLong() { //E2
  flashlightOn = !flashlightOn; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
  digitalWrite(FLASH_PIN, flashlightOn ? HIGH : LOW);
  tone(BUZZER_PIN, flashlightOn ? 1000 : 500, 100); // –∑–≤—É–∫ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏/–≤—ã–∫–ª—é—á–µ–Ω–∏–∏
 
}  

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ lastActivityTime –ø—Ä–∏ –ª—é–±–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ê–ô–ú–ï–†–ê –ê–í–¢–û-–û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø
void resetInactivityTimer() {
  lastActivityTime = millis();
  buzzerWarned = false;  // –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
}



// 1) –¢–∞–π–º–µ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
unsigned long timer;     // –¥–ª—è —Ä–µ–∂–∏–º–∞
uint8_t      t_offset;   // –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏–∑ EEPROM

// 2) –ß–∞—Å—Ç–æ—Ç–æ–º–µ—Ä
int   Htime, Ltime;
float Ttime, rtime;
int   pwm, freq;

// 3) –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
struct GeneratorState {
  bool positive = false;
  uint16_t frequency = 30;
  uint8_t dutyPercent = 10;
} gen;



// 5) –¢–∞–π–º–µ—Ä-–∏–º–ø—É–ª—å—Å
byte n = 1;
byte g = 1;
byte jdem;
byte impyls;
byte led = GEN_NEG;  // GEN_NEG –∏–ª–∏ GEN_POS


// –û–±—ä–µ–∫—Ç—ã
// 1) –î–∏—Å–ø–ª–µ–π
U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ SCL, /* data=*/ SDA);

// 2) –ö–Ω–æ–ø–∫–∏ (Bounce2) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
Bounce btnUp, btnDown, btnOk; 


// 3) –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
enum Mode {
  MODE_VOLT, MODE_OSC, MODE_FREQ, MODE_GEN,
  MODE_CANLIN, MODE_TIMER, MODE_DPKV,
  MODE_DIODE,MODE_COUNT
};

// –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
// // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
const char str_volt[]     PROGMEM = "VOLTMETER";
const char str_osc[]      PROGMEM = "OSCILLOSCOPE";
const char str_freq[]     PROGMEM = "FREQUENCE";
const char str_gen[]      PROGMEM = "GENERATOR";
const char str_canlin[]   PROGMEM = "CAN LIN TEST";
const char str_timer[]    PROGMEM = "TIMER";
const char str_dpkv[]     PROGMEM = "CRANK SENSOR";
const char str_diode[]    PROGMEM = "DIODE TEST";

// –ú–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
const char* const captions[] PROGMEM = {
  str_volt,
  str_osc,
  str_freq,
  str_gen,
  str_canlin,
  str_timer,
  str_dpkv,
  str_diode
};

// –°—Ç–µ–π—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
enum AppState { STATE_MENU, STATE_MODE };
static AppState appState = STATE_MENU;

// –¢–µ–∫—É—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
static Mode currentMode = MODE_VOLT;



void (*modeHandlers[MODE_COUNT])() = {
  voltmetr,
  oscilograf,
  shastotomer,
  generator,
  can_lin_test,
  timers,
  dpkv,
  diode_test 
};


// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
void processButtons() {
  for (auto &h : buttons) {
    h.btn.update();

    // 1) —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª–∏ ‚Üì
    if (h.btn.fell()) {
      resetInactivityTimer();
      h.pressedAt    = millis();
      h.longHandled  = false;
    }

    // 2) –¥–µ—Ä–∂–∞—Ç –∫–Ω–æ–ø–∫—É –∏ –¥–ª–∏–Ω–Ω–æ–µ –µ—â—ë –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ ‚Üì
    if (h.btn.read() == LOW
        && !h.longHandled
        && millis() - h.pressedAt >= LONG_PRESS_MS) {
      h.onLong();
      h.longHandled = true;
    }

    // 3) –æ—Ç–ø—É—Å—Ç–∏–ª–∏ ‚Üì
    if (h.btn.rose()) {
      // –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ
      if (!h.longHandled) {
        h.onShort();
      }
      h.pressedAt   = 0;
      h.longHandled = false;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–µ–Ω—é
// –†–∏—Å—É–µ—Ç –º–µ–Ω—é: –∫—Ä—É–∂–∫–∏ + –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
void drawMenu(U8G2 &u8g2, uint8_t selected) {
  u8g2.firstPage();
  do {
    u8g2.clearBuffer();

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—Ä—É–∂–∫–æ–≤ —Å —à–∞–≥–æ–º –ø–æ —à–∏—Ä–∏–Ω–µ –¥–∏—Å–ø–ª–µ—è
    uint8_t count = MODE_COUNT;
    uint8_t step = u8g2.getDisplayWidth() / count;
    for (uint8_t i = 0; i < count; ++i) {
      uint8_t x = step / 2 + i * step;
      uint8_t y = 25;
      u8g2.drawCircle(x, y, 3, U8G2_DRAW_ALL);            // –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
      if (i == selected) u8g2.drawDisc(x, y, 2, U8G2_DRAW_ALL); // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    }

    // –ü–æ–¥–ø–∏—Å—å —Ä–µ–∂–∏–º–∞ ‚Äî –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    char buf[13];
    // strcpy_P(buf, captions[selected]);
    strcpy_P(buf, (const char*)pgm_read_word(&(captions[selected])));
    u8g2.setFont(u8g2_font_10x20_mr);
    u8g2.setCursor(0, 13);
    u8g2.print(buf);

  } while (u8g2.nextPage());
}


// –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Ç—è–∂–∫–∏ –∫ +
static inline void setPull(bool on) {
  if (on) {
    pinMode(PULL_PIN, OUTPUT);
    digitalWrite(PULL_PIN, HIGH);   // –ø–æ–¥—Ç—è–∂–∫–∞ –∫ +V (—á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π 10k)
  } else {
    pinMode(PULL_PIN, INPUT);       // Hi-Z ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ü–µ–ø–∏–ª–∏—Å—å –æ—Ç –ª–∏–Ω–∏–∏
  }
  pullOn = on;
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ –¥–∏–æ–¥–æ–≤ –∏ –ø—Ä–æ–∑–≤–æ–Ω–∫–∞
void diode_test() {
  static bool firstRun = true;
  static bool overVoltageDetected = false;

  if (firstRun) {
    delay(30);
    firstRun = false;
    // tone(BUZZER_PIN, 800, 200);  // –∑–≤—É–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ
  }

  if (!overVoltageDetected) {
    setPull(true); // –ø–æ–¥—Ç—è–∂–∫–∞ –∫ VCC —á–µ—Ä–µ–∑ 10k
    // pinMode(4, OUTPUT);
    // digitalWrite(4, HIGH);  // –ø–æ–¥—Ç—è–∂–∫–∞ –∫ VCC —á–µ—Ä–µ–∑ 10k
  }
   delay(10);
  // === –ß—Ç–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è ===
  long sum = 0;
  for (int i = 0; i < 20; ++i) {
    sum += analogRead(ANALOG_IN);
    delay(1);
  }
  int adc = sum / 20;
  // float rawVoltage = (adc * ADC_REF / 1024.0f) / DIVIDER_K;
  // float voltage = rawVoltage * 1.6;  // –ü–æ–ø—Ä–∞–≤–∫–∞ –ø–æ–¥ —Ç–≤–æ–π –¥–∏–æ–¥
  float voltage = adc * DIODE_SCALE;


  // === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–ø–ª–∞–≤–∞—é—â–µ–≥–æ) ===
  bool floatingInput = (voltage > 2.0f && voltage < 40.2f);
  if (floatingInput) {
    voltage = -1.0f;
  }

   // === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ===
   const char* status = "WAIT";
   bool validReading = false;

   if (!overVoltageDetected) {
    if (voltage >= 0 && voltage < 0.05f) {
      status = "SHORT";
      tone(BUZZER_PIN, 1000);
      validReading = true;
    } else if (voltage >= 0 && voltage < 0.15f) {
      status = "DIODE";
      noTone(BUZZER_PIN);
      validReading = true;
    } else if (voltage >= 0 && voltage < 2.5f) {
      status = "OPEN";
      noTone(BUZZER_PIN);
      validReading = true;
    } else {
      noTone(BUZZER_PIN);
    }
  }

  // === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ===
  u8g2.firstPage();
  do {
    u8g2.drawTriangle(110, 2, 110, 10, 116, 6);
    u8g2.drawVLine(118, 2, 9);
    u8g2.drawHLine(104, 6, 6);
    u8g2.drawHLine(118, 6, 4);


    u8g2.setFont(u8g2_font_logisoso20_tn);
   char voltageStr[10];
   if (voltage >= 0 && !overVoltageDetected) {
    dtostrf(voltage, 4, 2, voltageStr);  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É: 4 —Å–∏–º–≤–æ–ª–∞ –¥–æ —Ç–æ—á–∫–∏, 2 –ø–æ—Å–ª–µ
     strcat(voltageStr, "V");
   } else {
   strcpy(voltageStr, "---");
   }
   int16_t x = (128 - u8g2.getStrWidth(voltageStr)) / 2;
   u8g2.setCursor(x, 30);  // –≤–µ—Ä—Ç–∏–∫–∞–ª—å = baseline —à—Ä–∏—Ñ—Ç–∞
   u8g2.print(voltageStr);


  } while (u8g2.nextPage());

  // === –í—ã—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ OK ===
  if (flagBtnOk) {
    flagBtnOk = false;
    pinMode(4, INPUT);
    tone(BUZZER_PIN, 600, 100);
    firstRun = true;
    setPull(false);
    overVoltageDetected = false;
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
  }
}



bool loadState = false;

void voltmetr() {
  static float voltage = 0.0f;
  static bool holdMode = false;
  static float heldVoltage = 0.0f;


  // –û—Ç–∫–ª—é—á–∞–µ–º –®–ò–ú –Ω–∞ D10 (–µ—Å–ª–∏ –±—ã–ª)
  TCCR1A &= ~(_BV(COM1B1) | _BV(COM1B0));
  pinMode(GEN_NEG, OUTPUT);
  digitalWrite(GEN_NEG, loadState ? HIGH : LOW);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–æ–π –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é UP
  if (flagLongUp) {
    flagLongUp = false;
    loadState = !loadState;
    digitalWrite(GEN_NEG, loadState ? HIGH : LOW);
    tone(BUZZER_PIN, 850, 100);
  }


   if (!holdMode) {
  long sum = 0;
  for (int i = 0; i < 50; i++) sum += analogRead(ANALOG_IN);
  Htime = sum / 50;

  if (Htime >= Ltime + 2 || Htime <= Ltime - 2) Ltime = Htime;

  volt_in = VOLT_SCALE * Ltime;
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_10x20_mr);
    u8g2.setCursor(0, 13);
    u8g2.print("V");

    if (loadState) {
      u8g2.setCursor(0, 32);
      u8g2.print("N");
    }

    // –°–∏–≥–Ω–∞–ª –æ –ø—Ä–æ—Å–∞–¥–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∂–µ 1.5 –í)
    if (volt_in >= 0.5f && volt_in <= 1.5f) {
      // tone(BUZZER_PIN, 700, 150);
    }

    // === –ù–æ–≤—ã–π —à—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ ===
    u8g2.setFont(u8g2_font_logisoso20_tn);
    char voltStr[10];
    dtostrf(volt_in, 4, 1, voltStr);  // —Ñ–æ—Ä–º–∞—Ç XX.X
    strcat(voltStr, "V");
    int x = (128 - u8g2.getStrWidth(voltStr)) / 2;
    u8g2.setCursor(x, 32);
    u8g2.print(voltStr);

  } while (u8g2.nextPage());

  if (Ltime <= 3) Ltime = 0;

    // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ E1 (BTN_UP) –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç HOLD
  if (flagBtnUp) {
    flagBtnUp = false;
    holdMode = !holdMode;
    if (holdMode) {
      heldVoltage = voltage;
      tone(BUZZER_PIN, 1200, 100); // —Å–∏–≥–Ω–∞–ª HOLD ON
    } else {
      tone(BUZZER_PIN, 600, 100);  // —Å–∏–≥–Ω–∞–ª HOLD OFF
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
  if (flagBtnOk) {
    flagBtnOk = false;
    loadState = false;
    tone(BUZZER_PIN, 600, 100);
    digitalWrite(GEN_NEG, LOW);
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
  }
}




//////////////////////////////////////////////////////
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// 4) –û—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ

int  m = 5;
int  w = 100;
// ==== –¢–∞–π–º–±–∞–∑–∞ –æ—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ–∞ ====
uint8_t h = 1;  // 0..5, —Å—Ç–∞—Ä—Ç: 10 –º—Å/—Ç–æ—á–∫—É
uint8_t i0_prev = 0; // –±—ã–ª static –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –≤—ã–Ω–µ—Å–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
#define OSC_N 32
#define NPER (sizeof(PERIODS_US)/sizeof(PERIODS_US[0]))
const uint32_t PERIODS_US[] = {

  // 10000,  // 10ms
  5000,   // 5ms
  2000,   // 2ms
  1000,   // 1ms
  500,    // 0.5ms
  200,    // 0.2ms
  100     // 0.1ms (–±—ã—Å—Ç—Ä–æ)
};
uint16_t oscData[OSC_N];
uint16_t oscPos = 0;
bool oscReady = false;
uint32_t lastSampleTime = 0;
uint32_t lastOscUpdate = 0;
const uint16_t MIN_SAMPLE_US = 120;


// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ
void oscilograf() {
  // –≤–æ–ª—å—Ç–º–µ–∏—Ä
  long sum = 0;
  for (int i = 0; i < 10; i++) sum += analogRead(ANALOG_IN);
  volt_in = VOLT_SCALE * (sum / 10);

  // === 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã ===
  uint32_t time_per_division = PERIODS_US[h];  // –í—Ä–µ–º—è –Ω–∞ –æ–¥–Ω–æ –¥–µ–ª–µ–Ω–∏–µ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
  uint32_t total_time = time_per_division * 10; // –í—Å–µ–≥–æ 10 –¥–µ–ª–µ–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–±–æ—Ä–∫–∞–º–∏ (–≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö)
  uint32_t sample_interval = total_time / OSC_N;

   // –Ω–µ —É—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º—ã –±—ã—Å—Ç—Ä–µ–µ –∂–µ–ª–µ–∑–∞
  if (sample_interval < MIN_SAMPLE_US) {
   // –ø–æ–¥–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π h, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç
   while (h < NPER-1 && (PERIODS_US[h]*10)/OSC_N < MIN_SAMPLE_US) h++;
  //  while (h > 0 && (PERIODS_US[h] * 10UL) / OSC_N < MIN_SAMPLE_US) h--;  // –∑–∞–º–µ–¥–ª—è–µ–º—Å—è
   time_per_division = PERIODS_US[h];
   total_time = time_per_division * 10;
   sample_interval = total_time / OSC_N;
  }

     // === 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ===
  static uint32_t last_sample_time = 0;
  uint32_t current_time = micros();

  if (!oscReady && (current_time - last_sample_time >= sample_interval)) {
      oscData[oscPos] = analogRead(ANALOG_IN);
      oscPos++;
      last_sample_time = current_time;
    
      if (oscPos >= OSC_N) {
        oscPos = 0;
        oscReady = true;
    }
  }


  // === 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ===
  if (oscReady) {
    // –ù–∞—Ö–æ–¥–∏–º min –∏ max —Å–∏–≥–Ω–∞–ª–∞
    uint16_t minVal = 1023, maxVal = 0;
    for (uint16_t i = 0; i < OSC_N; i++) {
      if (oscData[i] < minVal) minVal = oscData[i];
      if (oscData[i] > maxVal) maxVal = oscData[i];
    }
    uint16_t range = max(maxVal - minVal, 50); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 50
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
    uint16_t trig_level = (maxVal + minVal) / 2;
    uint16_t trig_hyst = max(5, range / 20);
    int16_t trig_pos = -1;
    
    for (uint16_t i = 1; i < OSC_N; i++) {
      if (oscData[i-1] < (trig_level - trig_hyst) && 
          oscData[i] >= (trig_level + trig_hyst)) {
        trig_pos = i;
        break;
      }
    }
    
    uint16_t start_pos = (trig_pos > OSC_N/4) ? (trig_pos - OSC_N/4) : 0;

    // === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ===
    u8g2.firstPage();
    do {
      uint8_t w = u8g2.getDisplayWidth();
      uint8_t h = u8g2.getDisplayHeight();
      

      for (uint8_t y = 0; y < h; y += h/5) {
        for (uint8_t x = 0; x < w; x += 8) {
          u8g2.drawPixel(x, y);
        }
      }
      
      // –°–∏–≥–Ω–∞–ª
      for (uint16_t x = 1; x < w; x++) {
        uint16_t idx1 = start_pos + (x-1)*OSC_N/w;
        uint16_t idx2 = start_pos + x*OSC_N/w;
        
        idx1 = min(idx1, OSC_N-1);
        idx2 = min(idx2, OSC_N-1);
        
        uint8_t y1 = h - 1 - ((oscData[idx1] - minVal) * (h-1) / range);
        uint8_t y2 = h - 1 - ((oscData[idx2] - minVal) * (h-1) / range);
        
        u8g2.drawLine(x-1, y1, x, y2);
      }
      
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      u8g2.setFont(u8g2_font_10x20_mr);
      u8g2.setCursor(0, 15);
      u8g2.print(volt_in, 1); u8g2.print("V");
      
      u8g2.setFont(u8g2_font_5x8_mr);
      u8g2.setCursor(0, 28);
      u8g2.print(time_per_division / 1000.0, 1); u8g2.print("ms");

      
    } while (u8g2.nextPage());
    
    oscReady = false;
  }

  // === 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑–æ–π ===
  if (flagBtnDown) {
    h = (h + 1) % NPER;
    oscPos = 0;
    oscReady = false;
    flagBtnDown = false;
    tone(BUZZER_PIN, 500, 100);
  }

   
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–æ–π –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é UP 
  if (flagLongUp) {
    flagLongUp = false;
    setPull(!pullOn);                    // —Ç—É–º–±–ª–µ—Ä
    tone(BUZZER_PIN, pullOn ? 1000 : 500, 100);
  }

  if (flagBtnOk) {
    appState = STATE_MENU;
    tone(BUZZER_PIN, 600, 100);
    drawMenu(u8g2, currentMode);
    setPull(false);   // –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–¥—Ç—è–∂–∫—É –≥–∞—Å–∏–º
    flagBtnOk = false;
  }
}




// –§—É–Ω–∫—Ü–∏—è —á–∞—Å—Ç–æ—Ç–æ–º–µ—Ä

void shastotomer() {
  static unsigned long lastCapture = 0;
  const unsigned long interval = 1000;  // –º—Å

  unsigned long now = millis();
  if (now - lastCapture >= interval) {
    lastCapture = now;

    // –æ–≥—Ä–∞–Ω–∏—á–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ 50 –º—Å, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–Ω—É—Ç—å
    Htime = pulseIn(FREQ_IN, HIGH, 50000);
    Ltime = pulseIn(FREQ_IN, LOW, 50000);
    Ttime = Htime + Ltime;
    rtime = Ttime - Ltime;
    pwm = (Ttime > 0) ? int((rtime * 100.0f) / Ttime) : 0;
    freq = (Ttime > 0) ? int(1000000.0f / Ttime) : 0;
  }

  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_10x20_mr);
    u8g2.setCursor(0, 13);
    u8g2.print("PWM: ");
    u8g2.print(pwm);
    u8g2.print("%");

    u8g2.setCursor(0, 32);
    u8g2.print("FREQ: ");
    u8g2.print(freq);
    u8g2.print("Hz");
  } while (u8g2.nextPage());

  // –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–æ OK
  if (flagBtnOk) {
    flagBtnOk = false;
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
    tone(BUZZER_PIN, 600, 100);
  }
}


// —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
void generator() {
  // === 1) –î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ Up ‚Äî –º–µ–Ω—è–µ–º –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å ===
  if (flagLongUp) {    
    delay(30);
    flagLongUp = false;
    gen.positive = !gen.positive;  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å
    tone(BUZZER_PIN, 850, 100);    // –∑–≤—É–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ
  }

  // === 2) –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ OK ‚Äî –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é ===
  if (flagBtnOk) {
    flagBtnOk = false;
    pwmWrite(GEN_POS, 0);  // –æ—Ç–∫–ª—é—á–∏—Ç—å D9
    pwmWrite(GEN_NEG, 0);  // –æ—Ç–∫–ª—é—á–∏—Ç—å D10
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
    tone(BUZZER_PIN, 600, 100);  // –∑–≤—É–∫ –ø—Ä–∏ –≤–´—Ö–æ–¥–µ
    return;
  }

  // === 3) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã –ø–æ –∫–Ω–æ–ø–∫–∞–º ===
  if (flagBtnUp) {
    gen.dutyPercent += 5;
    if (gen.dutyPercent > 100) gen.dutyPercent = 0;
    flagBtnUp = false;
    tone(BUZZER_PIN, 500, 100);
  }

  if (flagBtnDown) {
    gen.frequency += 100;
    if (gen.frequency > 2000) gen.frequency = 0;
    flagBtnDown = false;
    tone(BUZZER_PIN, 700, 100);
  }

  // === 4) –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ ===
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_10x20_mr);
    u8g2.setCursor(0, 13);
    u8g2.print(gen.dutyPercent);
    u8g2.print(" PWM ");
    u8g2.print(gen.positive ? "+" : "-");

    u8g2.setCursor(0, 32);
    u8g2.print(gen.frequency);
    u8g2.print(" Hz");
  } while (u8g2.nextPage());

  // === 5) –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
  uint8_t pin = gen.positive ? GEN_POS : GEN_NEG;
  uint8_t duty = map(gen.dutyPercent, 0, 100, 0, 255);

  // üí° –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–∞ –ø–∏–Ω–∞ ‚Äî —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π –∞–∫—Ç–∏–≤–µ–Ω
  pwmWrite(GEN_POS, 0);  // –æ—Ç–∫–ª—é—á–∏—Ç—å D9
  pwmWrite(GEN_NEG, 0);  // –æ—Ç–∫–ª—é—á–∏—Ç—å D10

  // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π
  pwmWrite(pin, duty);
  SetPinFrequency(pin, gen.frequency);
}



// // –§—É–Ω–∫—Ü–∏—è CAN/LIN —Ç–µ—Å—Ç–µ—Ä–∞ —Å –æ–ø–æ—Ä–æ–π 1.1 –í –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –≤ –≤–æ–ª—å—Ç–∞—Ö
void can_lin_test() {
  // 1) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ–º –≤—Ö–æ–¥ (~200 –º—Å)
  static unsigned long lastRead = 0;
  const unsigned long readInterval = 200;  // –º—Å
  static int adc_raw = -1;                 // -1 = –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–º–µ—Ä–∞

  unsigned long now = millis();
  if ((now - lastRead >= readInterval) || (adc_raw < 0)) { // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤—ã–π –∑–∞–º–µ—Ä
    lastRead = now;
    adc_raw = analogRead(ANALOG_IN);       // —á–∏—Ç–∞–µ–º –°–†–ê–ó–£ –≤ adc_raw
  }

  if (adc_raw < 0) return;                 // —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–π–¥—ë–º —Å—é–¥–∞

  float v = adc_raw * VOLT_SCALE;          // —Ç–≤–æ–π –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

  // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
  const char* label = "<  N/A  >";
  if      (v >= 1.0f && v <= 1.8f)  label = "< CAN L >";
  else if (v >= 2.8f && v <= 3.8f)  label = "< CAN H >";
  else if (v >= 7.0f && v <= 18.0f) label = "<  LIN  >";
  else if (v <= 0.30f)              label = "< TEST  >";

  // 3) –≠–∫—Ä–∞–Ω
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_10x20_mr);
    u8g2.setCursor(0, 13);
    u8g2.print(F("CAN LIN TEST"));  // F() ‚Äî —á—É—Ç—å —ç–∫–æ–Ω–æ–º–∏—Ç SRAM
    u8g2.setCursor(0, 32);
    u8g2.print(label);
  } while (u8g2.nextPage());

  // –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–æ OK
  if (flagBtnOk) {
    flagBtnOk = false;
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
    tone(BUZZER_PIN, 600, 100);
  }
}




// –§—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä

void timers() {
  delay(30);

  // === 0) –î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ Up ‚Äî –º–µ–Ω—è–µ–º –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å, –∫–∞–∫ –≤ generator() ===
  if (flagLongUp) {
    flagLongUp = false;
    // led ‚Äî —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏–Ω –ø–æ–ª—è—Ä–Ω–æ—Å—Ç–∏ (GEN_POS –∏–ª–∏ GEN_NEG)
    led = (led == GEN_POS) ? GEN_NEG : GEN_POS;
    // –≤—ã–∫–ª—é—á–∏–º –æ–±–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    digitalWrite(GEN_POS, LOW);
    digitalWrite(GEN_NEG, LOW);
    tone(BUZZER_PIN, 850, 100);   // –∑–≤—É–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—è—Ä–Ω–æ—Å—Ç–∏
  }

  // === 1) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É ===
  static unsigned long lastUpdate = 0;
  const unsigned long interval = 1000;  // –º—Å

  if (millis() - lastUpdate >= interval) {
    lastUpdate = millis();

    // 2) –ï—Å–ª–∏ –∏–º–ø—É–ª—å—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∞—á—É
    if (impyls == 0) {
      // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≥–∞—Å–∏–º –æ–±–∞
      digitalWrite(GEN_POS, LOW);
      digitalWrite(GEN_NEG, LOW);
      jdem   = n + 1;
      impyls = g;
    }

    // 3) –†–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_10x20_mr);
      u8g2.setCursor(0, 13);
      u8g2.print(g);
      u8g2.print(F(" IMP   "));
      u8g2.print(n);
      u8g2.print(F(" WAIT"));

      u8g2.setCursor(0, 32);
      if (impyls > 0 && jdem == (n + 1)) {
        // –§–∞–∑–∞ –ø–æ–¥–∞—á–∏ –∏–º–ø—É–ª—å—Å–æ–≤
        u8g2.print((led == GEN_POS) ? F("+ IMPULS ") : F("- IMPULS "));
        u8g2.print(impyls);
      } else {
        // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        u8g2.print((led == GEN_POS) ? F("+ WAIT   ") : F("- WAIT   "));
        u8g2.print(jdem);
      }
    } while (u8g2.nextPage());

    // 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏ –∑–≤—É–∫
    if (impyls > 0 && jdem == (n + 1)) {
      // –ø–æ–¥–∞—ë–º –∏–º–ø—É–ª—å—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—è—Ä–Ω–æ—Å—Ç–∏
      tone(BUZZER_PIN, 500, 200);
      // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –ø–∏–Ω –ø–æ–≥–∞—à–µ–Ω
      if (led == GEN_POS) {
        digitalWrite(GEN_NEG, LOW);
        digitalWrite(GEN_POS, HIGH);
      } else {
        digitalWrite(GEN_POS, LOW);
        digitalWrite(GEN_NEG, HIGH);
      }
      impyls--;
    } else {
      // —Ñ–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è
      tone(BUZZER_PIN, 900, 50);
      jdem--;
      // –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±–∞ –ø–∏–Ω–∞ LOW
      digitalWrite(GEN_POS, LOW);
      digitalWrite(GEN_NEG, LOW);
    }
  }

  // === –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–æ OK ===
  if (flagBtnOk) {
    flagBtnOk = false;
    // –≥–∞—Å–∏–º –æ–±–∞ –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    digitalWrite(GEN_POS, LOW);
    digitalWrite(GEN_NEG, LOW);
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
    tone(BUZZER_PIN, 600, 100); // –∑–≤—É–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  }
}


// –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–ª–µ–Ω–≤–∞–ª–∞

enum DPKVState { DPKV_IDLE, DPKV_RUNNING };


void dpkv() {
    static DPKVState state = DPKV_IDLE;
    static unsigned long slotTimer = 0;
    static byte currentElement = 0;     // –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (0..totalElements-1)
    static byte phase = 0;              // –§–∞–∑–∞ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (0 –∏–ª–∏ 1)
    static bool tuning = true;
    static byte editMode = 0;
    static byte i = 58, a = 2;          // ZUB –∏ PR
    static int rpm = 1000;              // OB
    static unsigned long slotTime = 0;  // –í—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
    static byte totalElements = 0;      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    // === –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
    if (tuning) {
        u8g2.firstPage();
        do {
            u8g2.setFont(u8g2_font_7x14_mr);
            u8g2.setCursor(0, 14);
            u8g2.print("ZUB:");
            u8g2.print(i);
            if (editMode == 0) u8g2.print("<");

            u8g2.setCursor(70, 14);
            u8g2.print("PR:");
            u8g2.print(a);
            if (editMode == 1) u8g2.print("<");

            u8g2.setCursor(0, 30);
            u8g2.print("OB:");
            u8g2.print(rpm);
            if (editMode == 2) u8g2.print("<");

        } while (u8g2.nextPage());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (flagBtnUp) {
            flagBtnUp = false;
            if (editMode == 0 && i < 127) i++;
            else if (editMode == 1 && a < 127) a++;
            else if (editMode == 2 && rpm < 7000) rpm += 100;
        }

        if (flagBtnDown) {
            flagBtnDown = false;
            if (editMode == 0 && i > 1) i--;
            else if (editMode == 1 && a > 0) a--;
            else if (editMode == 2 && rpm > 100) rpm -= 100;
        }

        if (flagBtnOk) {
            flagBtnOk = false;
            editMode++;
            if (editMode > 2) {
                tuning = false;
                state = DPKV_RUNNING;
                currentElement = 0;
                phase = 0;
                digitalWrite(GEN_POS, LOW);

                // –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢
                // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑—É–±—Ü—ã + –ø—Ä–æ–ø—É—Å–∫–∏)
                totalElements = i + a;
                
                // –í—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
                unsigned long revolutionTime = 6000000000UL / rpm;
                
                // –ö–∞–∂–¥—ã–π –∑—É–±–µ—Ü –∏–º–µ–µ—Ç 2 —Å–ª–æ—Ç–∞ (HIGH –∏ LOW), –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫ –∏–º–µ–µ—Ç 2 —Å–ª–æ—Ç–∞ (LOW –∏ LOW)
                // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: (i + a) * 2
                slotTime = revolutionTime / (totalElements * 2);
                
                // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if (slotTime < 50) slotTime = 50; // –ú–∏–Ω–∏–º—É–º 50 –º–∫—Å

                slotTimer = micros();
                tone(BUZZER_PIN, 1000, 150);
            }
        }
        return;
    }  

    // === –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
    if (state == DPKV_RUNNING) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π
        u8g2.firstPage();
        do {
            u8g2.setFont(u8g2_font_7x14_mr);
            u8g2.setCursor(0, 14);
            u8g2.print("ZUB:");
            u8g2.print(i);
            u8g2.print(" PR:");
            u8g2.print(a);
            
            u8g2.setCursor(0, 30);
            u8g2.print("OB:");
            u8g2.print(rpm);
            u8g2.print(" E:");
            u8g2.print(currentElement);
            u8g2.print("/");
            u8g2.print(phase);
            
            u8g2.setCursor(0, 50);
            u8g2.print("SLOT:");
            u8g2.print(slotTime);
            u8g2.print("us");
            
        } while (u8g2.nextPage());

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        unsigned long currentMicros = micros();
        if (currentMicros - slotTimer >= slotTime) {
            slotTimer = currentMicros;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
            bool isTooth = (currentElement < i);

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–º
            if (isTooth) {
                // –î–ª—è –∑—É–±—Ü–∞: 1-—è —Ñ–∞–∑–∞ - HIGH, 2-—è —Ñ–∞–∑–∞ - LOW
                digitalWrite(GEN_POS, (phase == 0) ? HIGH : LOW);
            } else {
                // –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: –æ–±–µ —Ñ–∞–∑—ã - LOW
                digitalWrite(GEN_POS, LOW);
            }

            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ/—ç–ª–µ–º–µ–Ω—Ç—É
            phase++;
            if (phase > 1) {
                phase = 0;
                currentElement++;
                if (currentElement >= totalElements) {
                    currentElement = 0;  // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä–æ—Ç–∞
                }
            }
        }
    }

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ ===
    if (flagBtnOk) {
        flagBtnOk = false;
        digitalWrite(GEN_POS, LOW);
        state = DPKV_IDLE;
        tuning = true;
        editMode = 0;
        tone(BUZZER_PIN, 600, 100);
        appState = STATE_MENU;
        drawMenu(u8g2, currentMode);
    }
}







// –§—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏
void handleReversePolarity() {
  reverseDetected = true;
}

// –ù –ê –° –¢ –† –û –ô –ö –ê (—Å–µ—Ç–∞–ø) //
void setup() { 

pinMode(PIN_PWR_HOLD, OUTPUT);
digitalWrite(PIN_PWR_HOLD, LOW);  // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

pinMode(BTN_OK, INPUT_PULLUP);
pinMode(BUZZER_PIN, OUTPUT);

// –ü–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
delay(50);

// –ï—Å–ª–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ ‚Äî –≤–∫–ª—é—á–∞–µ–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
if (digitalRead(BTN_OK) == LOW) {
  delay(1000);  // –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  if (digitalRead(BTN_OK) == LOW) {
    digitalWrite(PIN_PWR_HOLD, HIGH);  // –í–∫–ª—é—á–∏—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–µ
    tone(BUZZER_PIN, 800, 100); // –∑–≤—É–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ
  }
}


  // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ê–¶–ü (–¥–ª—è Arduino UNO/NANO)
  
  ADCSRA = (ADCSRA & 0xF8) | 0x02; // –î–µ–ª–∏—Ç–µ–ª—å 16 (~62.5 –∫–ì—Ü)
  t_offset = EEPROM.read(0);
  // === –¢–∞–π–º–µ—Ä—ã –¥–ª—è –®–ò–ú (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ SafeTimers) ===
  InitTimersSafe();
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è
  u8g2.setBusClock(400000); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ I2C

  // // === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤ ===
  buttons[0].btn.attach(BTN_OK, INPUT_PULLUP);
  buttons[0].btn.interval(10);
  buttons[0].onShort = okShort;
  buttons[0].onLong  = okLong;

  buttons[1].btn.attach(BTN_UP, INPUT_PULLUP);
  buttons[1].btn.interval(10);
  buttons[1].onShort = upShort;
  buttons[1].onLong  = upLong;

  buttons[2].btn.attach(BTN_DOWN, INPUT_PULLUP);
  buttons[2].btn.interval(10);
  buttons[2].onShort = downShort;
  buttons[2].onLong  = downLong;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞
  pinMode(FLASH_PIN, OUTPUT);
  digitalWrite(FLASH_PIN, LOW);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—â–∞–ª–∫–∏
  pinMode(BUZZER_PIN, OUTPUT);
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ +
  pinMode(GEN_NEG,   OUTPUT);
  digitalWrite(GEN_NEG, LOW);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ -
  pinMode(GEN_POS,   OUTPUT);
  digitalWrite(GEN_POS, LOW);

  analogReference(INTERNAL);

  // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è ===
  u8g2.begin();
  u8g2.setFont(u8g2_font_10x20_mr);

  // –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
  u8g2.clearBuffer();
  u8g2.setCursor(20, 25);
  u8g2.print("SVSTARTER");
  u8g2.sendBuffer();
   delay(2000);
  // –ú–µ–ª–æ–¥–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  tone(BUZZER_PIN, 466, 186);
  delay(186);
  tone(BUZZER_PIN, 2794, 186);
  delay(186);
  noTone(BUZZER_PIN);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
  drawMenu(u8g2, currentMode);

  lastActivityTime = millis();  // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–ª—è —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ-–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  
  StopTime = millis(); // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è

   // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏ ===
  pinMode(POLARITY_PIN, INPUT_PULLUP);
  pinMode(PIN_MOSFET_CTRL, OUTPUT);
  digitalWrite(PIN_MOSFET_CTRL, HIGH); // —Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á–∞–µ–º –º–æ—Å—Ñ–µ—Ç –º–∏–Ω—É—Å–æ–≤–æ–≥–æ —â—É–ø–∞

  // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫—É (LOW —Å –æ–ø—Ç–æ–ø–∞—Ä—ã = –æ—à–∏–±–∫–∞)
 attachInterrupt(digitalPinToInterrupt(POLARITY_PIN), handleReversePolarity, FALLING);
 setPull(false);   // —Å—Ç–∞—Ä—Ç—É–µ–º —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–æ–¥—Ç—è–∂–∫–æ–π–∫ +VCC
 

}

void loop() {

  if (reverseDetected) {
  digitalWrite(PIN_MOSFET_CTRL, LOW);  // –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å
    if (millis() - StopTime > 3000) {
    tone(BUZZER_PIN, 900);  // –ø–∏—â–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã
  }
  while (digitalRead(POLARITY_PIN) == LOW);  // –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
  delay(recoveryDelay);                     // –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  digitalWrite(PIN_MOSFET_CTRL, HIGH);      // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
  noTone(BUZZER_PIN);
  reverseDetected = false;
}

  
  processButtons(); // —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫

     // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
   unsigned long now = millis();
   if (now - lastActivityTime >= 3 * 60 * 1000UL && !buzzerWarned) {
     tone(BUZZER_PIN, 800, 150); // –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–∫
     buzzerWarned = true;
   }
   if (now - lastActivityTime >= 5 * 60 * 1000UL) {
    // –í—ã–∫–ª—é—á–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ
    digitalWrite(PIN_PWR_HOLD, LOW);
    delay(100);
    while (1);  // –ñ–¥—ë–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
   }  
    

     // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
    if (appState == STATE_MENU) {
    if (flagBtnUp) {
      currentMode = Mode((currentMode + MODE_COUNT - 1) % MODE_COUNT);
      drawMenu(u8g2, currentMode);
      tone(BUZZER_PIN, 500, 100);
      resetInactivityTimer(); //  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      flagBtnUp = false;
    }

    if (flagBtnDown) {
      currentMode = Mode((currentMode + 1) % MODE_COUNT);
      drawMenu(u8g2, currentMode);
      tone(BUZZER_PIN, 500, 100);
      resetInactivityTimer(); //  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      flagBtnDown = false;
    }

    if (flagBtnOk) {
      resetInactivityTimer(); //  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      appState = STATE_MODE;
      tone(BUZZER_PIN, 1000, 200);
      flagBtnOk = false;
    }

    return;
  }

   switch (currentMode) {
     case MODE_VOLT:    voltmetr();       break;
     case MODE_OSC:     oscilograf();     break;
     case MODE_FREQ:    shastotomer();    break;
     case MODE_GEN:     generator();      break;
     case MODE_CANLIN:  can_lin_test();   break;
     case MODE_TIMER:   timers();         break;
     case MODE_DPKV:    dpkv();           break;
     case MODE_DIODE:   diode_test();     break;
     default: break;
   }

   if (flagBtnOk) {
    appState = STATE_MENU;
    drawMenu(u8g2, currentMode);
    tone(BUZZER_PIN, 600, 100);
    flagBtnOk = false;
   }

}









